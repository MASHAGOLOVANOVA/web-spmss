"""
project_handler - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
"""
from datetime import datetime
from requests import RequestException
from task.task_service import get_project_tasks, add_task_to_project


def task_handler_init(bot):
    """–•–µ–Ω–¥–ª–µ—Ä init"""

    @bot.callback_query_handler(func=lambda call: call.data.startswith("add_task_project_"))
    def handle_project_new_task(call):
        """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        project_id = call.data.split("_")[3]

        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, handle_task_name, bot, project_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("tasks_project_"))
    def handle_project_tasks(call):
        """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞"""
        project_id = call.data.split("_")[2]

        try:
            tasks = get_project_tasks(call.message.chat.id, project_id)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å

            tasks_message = format_tasks_message(tasks)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(call.message.chat.id, tasks_message, parse_mode="Markdown")

        except RequestException as e:
            bot.send_message(call.message.chat.id, str(e))


def format_tasks_message(tasks):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not tasks:
        return "–ó–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    tasks_message = "*–ó–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É:*\n\n"
    for task in tasks:
        task_id = task.get("id", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        task_name = task.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        task_description = task.get("description", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        task_dead = task.get("deadline", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        task_status = task.get("status", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        cloud_folder_link = task.get("cloud_folder_link", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        formatted_deadline = (datetime.fromisoformat(task_dead[:-1])
                              .strftime("%Y-%m-%d %H:%M:%S"))

        tasks_message += f"üîπ *ID:* {task_id}\n"
        tasks_message += f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {task_name}\n"
        tasks_message += f"üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* {task_description}\n"
        tasks_message += f"üìÖ *–î–µ–¥–ª–∞–π–Ω:* {formatted_deadline}\n"
        tasks_message += f"üîÑ *–°—Ç–∞—Ç—É—Å:* {task_status}\n"
        tasks_message += f"üìÇ *–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É:* [Google Drive]({cloud_folder_link})\n\n"

    return tasks_message


def handle_task_name(message, bot, project_id):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_name = message.text  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(
        message, handle_task_description, bot, project_id, task_name
    )


def handle_task_description(message, bot, project_id, task_name):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_description = message.text  # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

    bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY HH:MM):"
    )
    bot.register_next_step_handler(
        message, handle_task_deadline, bot, project_id, task_name, task_description
    )


def handle_task_deadline(message, bot, project_id, task_name, task_description):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç."""
    task_deadline_input = message.text  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏
    try:
        deadline_datetime = datetime.strptime(task_deadline_input, "%d.%m.%Y %H:%M")

        new_task_data = {
            "name": task_name,
            "description": task_description,
            "deadline": deadline_datetime.isoformat() + "Z",  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É ISO 8601
        }

        response = add_task_to_project(message.chat.id, project_id, new_task_data)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å

        if response.status_code == 200:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {response.text}")

    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç dd.mm.YYYY HH:MM.",
        )
        bot.register_next_step_handler(
            message, bot, handle_task_deadline, project_id, task_name, task_description
        )
