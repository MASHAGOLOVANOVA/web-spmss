"""
meeting-handler - –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from datetime import timedelta, datetime, timezone
import telebot
from telebot import types
from telegram.constants import ParseMode

from bot.bot import user_sessions
from meeting.meeting_service import get_meetings, add_meeting, get_professor_slots, choose_slot, cancel_meeting, reschedule_meeting
from menu.menu_handler import show_main_menu
from application.application_service import get_applications

days_translation = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}


def meeting_handler_init(bot):
    """–•–µ–Ω–¥–ª–µ—Ä init"""

    @bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏")
    def handle_meetings(message):
        prof = user_sessions[message.chat.id].is_professor
        print("is professor", prof)
        if prof:
            meetings = get_meetings(message.chat.id, True)
        else:
            meetings = get_meetings(message.chat.id, False)
        now = datetime.now(timezone.utc)
        meetings = [m for m in meetings if datetime.fromisoformat(m["end_time"].replace("Z", "+00:00")) >= now]

        if not meetings:
            bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á")
            return
        if len(meetings) > 0:
            if prof:
                grouped_meetings = group_meetings_by_day(meetings)
                for day, day_meetings in grouped_meetings.items():
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
                    bot.send_message(message.chat.id, f"*{day}*", parse_mode="Markdown")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≤—Å—Ç—Ä–µ—á—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    for meeting in day_meetings:
                        send_meeting_with_buttons(bot, message.chat.id, meeting)
            else:
                response = format_meetings_student(group_meetings_by_day_student(meetings))
                for d in response:
                    bot.send_message(message.chat.id, d, parse_mode=ParseMode.MARKDOWN)

        else:
            bot.send_message(message.chat.id, "–í—Å—Ç—Ä–µ—á–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")

    @bot.callback_query_handler(
        func=lambda call: call.data.startswith("add_meeting_project_")
    )
    def handle_project_new_meeting(call):
        """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É"""
        project_id = call.data.split("_")[3]
        student_id = call.data.split("_")[5]

        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
        bot.register_next_step_handler(
            call.message, handle_meeting_name, bot, project_id, student_id
        )

    @bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    def handle_choose_slot(message):
        applications = get_applications(message.chat.id)
        has_buttons = False
        unique_professors = {}
        if applications:
            # Collect unique professors
            for application in applications:
                professor_id = application["professor_id"]
                professor_name = application["professor_name"]
                if professor_id not in unique_professors and application["status"] == "true":
                    unique_professors[professor_id] = professor_name  # Store unique professor

            keyboard = types.InlineKeyboardMarkup()
            for prof_id, prof_name in unique_professors.items():
                button = types.InlineKeyboardButton(
                    text=unique_professors[prof_id],
                    callback_data=f"apply_consultation_{prof_id}"
                )
                keyboard.add(button)
                has_buttons = True
            if has_buttons:
                response_message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:"
                bot.send_message(message.chat.id, response_message, reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫–∏.")
        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–≤ –Ω–µ—Ç.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("apply_consultation_"))
    def handle_consultation_application(call):
        professor_id = call.data.split("_")[-1]

        slots = get_professor_slots(call.message.chat.id, professor_id)
        print(slots)
        if slots:
            keyboard = types.InlineKeyboardMarkup()  # Create an inline keyboard
            for slot in slots:
                # Create a button for each slot
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                start_time = datetime.fromisoformat(slot['start_time'])
                end_time = datetime.fromisoformat(slot['end_time'])

                formatted_date = start_time.strftime("%d.%m.%Y")
                formatted_start = start_time.strftime("%H:%M")
                formatted_end = end_time.strftime("%H:%M")

                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = (
                    f"üìÖ {formatted_date}\n"
                    f"üïí {formatted_start}-{formatted_end}\n"
                    f"üìù {slot['description']}"
                )

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
                button = types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"book_slot_{slot['id']}"
                )
                keyboard.add(button)

            response_message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:"
            bot.send_message(call.message.chat.id, response_message,
                             reply_markup=keyboard)  # Send message with keyboard
        else:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("book_slot_"))
    def handle_book_slot(call):
        slot_id = call.data.split("_")[-1]
        resp = choose_slot(call.message.chat.id, slot_id)
        if resp == 200:
            bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        else:
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")

    @bot.callback_query_handler(func=lambda call: call.data.startswith(('cancel_', 'reschedule_')))
    def handle_meeting_actions(call):
        try:
            action, meeting_id = call.data.split('_')

            if action == "cancel":
                # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=None
                )

                # –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å—Ç—Ä–µ—á–∏
                if cancel_meeting(call.message.chat.id, meeting_id):
                        bot.answer_callback_query(call.id, "–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                        bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text=f"{call.message.text}\n\n‚ùå *–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*",
                            parse_mode="Markdown"
                        )

                else:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å—Ç—Ä–µ—á–∏")

            elif action == "reschedule":
                print(user_sessions[call.message.chat.id].reschedule_process())
                if user_sessions[call.message.chat.id].reschedule_process() is None:
                    user_sessions[call.message.chat.id].set_rescheduling(True)
                    bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")
                    msg = bot.send_message(
                        call.message.chat.id,
                        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                        f"–ü—Ä–∏–º–µ—Ä: 15.07.2023 14:30"
                    )
                    bot.register_next_step_handler(msg, process_reschedule_date, meeting_id)
                else:
                    bot.send_message(call.message.chat.id,"–í—ã —É–∂–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤—Å—Ç—Ä–µ—á.")
        except Exception as e:
            print(f"Error handling meeting action: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def process_reschedule_date(message, meeting_id):
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
            new_datetime = new_datetime - timedelta(hours=5)
            iso_datetime = new_datetime.isoformat() + "Z"
            if reschedule_meeting(message.chat.id, meeting_id, iso_datetime):
                bot.send_message(
                    message.chat.id,
                    "‚úÖ –í—Å—Ç—Ä–µ—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞."
                )
            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∏")
            user_sessions[message.chat.id].set_rescheduling(None)

        except ValueError:
            user_sessions[message.chat.id].set_rescheduling(None)
            bot.send_message(message.chat.id, "‚ö†Ô∏è–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")


def handle_meeting_name(message, bot, project_id, student_id):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
    name = message.text  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
    bot.register_next_step_handler(
        message, handle_meeting_description, bot, project_id, student_id, name
    )


def handle_meeting_description(message, bot, project_id, student_id, name):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
    desc = message.text  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    meeting_info = {
        "name": name,
        "description": desc,
        "project_id": project_id,
        "student_id": student_id
    }
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏:")
    bot.register_next_step_handler(
        message, handle_meeting_time, bot, meeting_info
    )


def handle_meeting_time(message, bot, meeting_info):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏"""
    time = message.text
    try:
        iso_time = (datetime.strptime(time, "%d.%m.%Y %H:%M")).isoformat()
        meeting_info["start_time"] = iso_time
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏:",
            reply_markup=get_meeting_format_markup(),
        )
        bot.register_next_step_handler(
            message, handle_meeting_format, bot, meeting_info
        )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM.",
        )
        bot.register_next_step_handler(
            message, handle_meeting_time, bot, meeting_info
        )


def handle_meeting_format(message, bot, meeting_info):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏."""
    meeting_format = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏

    if meeting_format not in ["–û–Ω–ª–∞–π–Ω", "–û—Ñ—Ñ–ª–∞–π–Ω"]:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏: –û–Ω–ª–∞–π–Ω –∏–ª–∏ –û—Ñ—Ñ–ª–∞–π–Ω.",
        )
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π

    try:
        online = meeting_format == "–û–Ω–ª–∞–π–Ω"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ is_online
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
        new_meeting_data = {
            "name": meeting_info["name"],
            "description": meeting_info["description"],
            "project_id": int(meeting_info["project_id"]),
            "student_participant_id": int(meeting_info["student_id"]),
            "is_online": online,
            "meeting_time": meeting_info["start_time"] + "Z",  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É ISO 8601
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        if add_meeting(message.chat.id, new_meeting_data):
            bot.send_message(message.chat.id, "–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM.",
        )
    finally:
        show_main_menu(message.chat.id)


def get_meeting_format_markup():
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏"""
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button_online = telebot.types.KeyboardButton("–û–Ω–ª–∞–π–Ω")
    button_offline = telebot.types.KeyboardButton("–û—Ñ—Ñ–ª–∞–π–Ω")
    markup.add(button_online, button_offline)
    return markup


def group_meetings_by_day(meetings):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤—Å—Ç—Ä–µ—á"""
    grouped = {}
    for meeting in meetings:
        start_time = datetime.fromisoformat(meeting["start_time"].replace("Z", "+00:00"))
        day = days_translation.get(start_time.strftime("%A"))  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        date = start_time.strftime("%d.%m.%Y")
        day += f", {date}"
        if day not in grouped:
            grouped[day] = []
        grouped[day].append(meeting)
    return grouped


def group_meetings_by_day_student(meetings):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤—Å—Ç—Ä–µ—á"""
    grouped = {}
    for meeting in meetings:
        meeting_time = datetime.fromisoformat(meeting["start_time"].replace("Z", "+00:00"))
        day = days_translation.get(meeting_time.strftime("%A"))  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        date = meeting_time.strftime("%d.%m.%Y")
        day += f", {date}"
        if day not in grouped:
            grouped[day] = []
        grouped[day].append(meeting)
    return grouped


def format_meetings(grouped_meetings):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á"""
    alldays = []
    for day, meetings in grouped_meetings.items():
        response = f"*{day}*\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        for meeting in meetings:
            start_time = datetime.fromisoformat(meeting["start_time"].replace("Z", "+00:00"))
            end_time = datetime.fromisoformat(meeting["end_time"].replace("Z", "+00:00"))
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            formatted_start_time = start_time.strftime("%H:%M")
            formatted_end_time = end_time.strftime("%H:%M")
            response += f"{formatted_start_time} - {formatted_end_time}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {meeting['description']}\n"
            response += f"–°—Ç—É–¥–µ–Ω—Ç: {meeting['student_name']}\n"
            if meeting['project_theme'] != "":
                response += f"–ü—Ä–æ–µ–∫—Ç: {meeting['project_theme']}\n"
            response += f"{'–û–Ω–ª–∞–π–Ω' if meeting['is_online'] else '–û—Ñ—Ñ–ª–∞–π–Ω'}\n\n"
        response += "\n"
        alldays.append(response)
    return alldays


def format_meetings_student(grouped_meetings):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á"""
    alldays = []
    for day, meetings in grouped_meetings.items():
        response = f"*{day}*\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        for meeting in meetings:
            start_time = datetime.fromisoformat(meeting["start_time"].replace("Z", "+00:00"))
            end_time = datetime.fromisoformat(meeting["end_time"].replace("Z", "+00:00"))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            formatted_start_time = start_time.strftime("%H:%M")
            formatted_end_time = end_time.strftime("%H:%M")
            response += f"{formatted_start_time} - {formatted_end_time}\n"
            response += f"–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä: {meeting['professor_name']}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {meeting['description']}\n"
            response += f"{'–û–Ω–ª–∞–π–Ω' if meeting['is_online'] else '–û—Ñ—Ñ–ª–∞–π–Ω'}\n\n"
        response += "\n"
        alldays.append(response)
    return alldays


def format_single_meeting(meeting):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –≤—Å—Ç—Ä–µ—á—É"""
    start_time = datetime.fromisoformat(meeting["start_time"].replace("Z", "+00:00"))
    end_time = datetime.fromisoformat(meeting["end_time"].replace("Z", "+00:00"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    now = datetime.now(timezone.utc)
    status = ""
    if start_time <= now <= end_time:
        status = "üî¥ *–ò–¥–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å*\n"

    formatted = (
        f"{status}"
        f"*{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}*\n"
        f"–°—Ç—É–¥–µ–Ω—Ç: {meeting['student_name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {meeting['description']}\n"
    )

    if meeting.get('project_theme'):
        formatted += f"–ü—Ä–æ–µ–∫—Ç: {meeting['project_theme']}\n"

    formatted += f"–§–æ—Ä–º–∞—Ç: {'–û–Ω–ª–∞–π–Ω' if meeting['is_online'] else '–û—Ñ—Ñ–ª–∞–π–Ω'}\n"
    return formatted


def send_meeting_with_buttons(bot, chat_id, meeting):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å—Ç—Ä–µ—á—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    text = format_single_meeting(meeting)

    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{meeting['id']}"),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{meeting['id']}")
    )

    bot.send_message(
        chat_id,
        text,
        parse_mode="Markdown",
        reply_markup=markup
    )