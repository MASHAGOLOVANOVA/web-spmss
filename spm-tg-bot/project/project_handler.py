"""
project_handler - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from datetime import datetime, timedelta
import telebot
from requests import RequestException

from bot.bot import CLIENT_URL
from project.project_service import get_projects, \
    get_project_commits, get_project_details, get_project_statistics, \
    add_project
from menu.menu_handler import show_main_menu
from student.student_service import get_students
from student.student_handler import handle_student_name
from integration.integration_handler import get_repohub


def projects_handler_init(bot):
    """–•–µ–Ω–¥–ª–µ—Ä init"""

    @bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
    def handle_projects_command(message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã."""
        handle_projects(message,bot)

    @bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
    def new_project(message):
        """–•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"""
        students = get_students()

        if not students:
            bot.send_message(
                message.chat.id,
                """–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:""",
            )
            bot.register_next_step_handler(message, handle_student_name)
            return
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(telebot.types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞..."))
        for student in students:
            keyboard.add(
                telebot.types.KeyboardButton(
                    student["surname"] + " " + student["name"] + " " + student["middlename"]
                )
            )  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å—Ç—å –ø–æ–ª–µ 'name'

        bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=keyboard
        )
        bot.register_next_step_handler(message, handle_student_selection, bot)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("project_"))
    def handle_project_details(call):
        """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        project_id = call.data.split("_")[1]

        response = get_project_details(call.message.chat.id, project_id)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å

        if response.status_code == 200:
            project_details = response.json()

            details_message = format_project_details(project_details)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            markup = create_markup(bot, project_details, call.message.chat.id)  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏

            bot.send_message(
                call.message.chat.id,
                details_message,
                reply_markup=markup,
                parse_mode="Markdown",
            )
        else:
            bot.send_message(
                call.message.chat.id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}",
            )
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(
        func=lambda call: call.data.startswith("statistics_project_")
    )
    def handle_project_statistics(call):
        """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É"""
        project_id = call.data.split("_")[2]

        response = get_project_statistics(call.message.chat.id,project_id)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å

        if response.status_code == 200:
            statistics = response.json()
            stats_message = format_statistics_message(statistics)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(call.message.chat.id, stats_message, parse_mode="Markdown")
        else:
            bot.send_message(
                call.message.chat.id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}",
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("commits_project_"))
    def handle_project_commits(call):
        """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç—É"""
        project_id = call.data.split("_")[2]
        current_time = datetime.utcnow() - timedelta(days=30)
        month_ago = current_time.replace(hour=0, minute=0, second=0, microsecond=0)

        iso_format_time = month_ago.strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"

        response = get_project_commits(call.message.chat.id, project_id, iso_format_time)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        if response.status_code == 200:
            commits_data = response.json()
            commits = commits_data.get("commits", [])

            if commits:
                commits_message = "*–ö–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞:*\n\n"
                for commit in commits:
                    commits_message += format_commit_message(commit)

                bot.send_message(call.message.chat.id, commits_message, parse_mode="Markdown")
            else:
                bot.send_message(call.message.chat.id, "–ö–æ–º–º–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        else:
            bot.send_message(
                call.message.chat.id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}",
            )


def format_commit_message(commit):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–º–º–∏—Ç–µ."""
    commit_sha = commit.get("commit_sha", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    message = commit.get("message", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    date_created = commit.get("date_created", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    created_by = commit.get("created_by", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    formatted_date = datetime.fromisoformat(date_created[:-1]).strftime("%Y-%m-%d %H:%M:%S")
    return (
        f"üîπ *SHA:* {commit_sha}\n"
        f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message}\n"
        f"üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {formatted_date}\n"
        f"üë§ *–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:* {created_by}\n\n"
    )


def format_grades(grades):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–∞–º–∏."""
    defence_grade = grades.get("defence_grade", "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏")
    supervisor_grade = grades.get("supervisor_grade", "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏")
    final_grade = grades.get("final_grade", "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏")
    supervisor_review = grades.get("supervisor_review", {})
    grades_message = (
        "*–û—Ü–µ–Ω–∫–∏:*\n"
        f"üéì *–ó–∞—â–∏—Ç–∞:* {defence_grade}\n"
        f"üë®‚Äçüè´ *–û—Ü–µ–Ω–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:* {supervisor_grade}\n"
        f"üèÜ *–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:* {final_grade}\n\n"
    )
    if supervisor_review:
        review_criterias = supervisor_review.get("criterias", [])
        if review_criterias:
            grades_message += "*–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:*\n"
            for criteria in review_criterias:
                criteria_name = criteria.get("criteria", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                criteria_grade = criteria.get("grade", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                criteria_weight = criteria.get("weight", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                grades_message += f"- {criteria_name}:"
                grades_message += f" –û—Ü–µ–Ω–∫–∞ {criteria_grade} (–í–µ—Å: {criteria_weight})\n"

    return grades_message


def format_statistics_message(statistics):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞."""
    total_meetings = statistics.get("total_meetings", 0)
    total_tasks = statistics.get("total_tasks", 0)
    tasks_done = statistics.get("tasks_done", 0)
    tasks_done_percent = statistics.get("tasks_done_percent", 0)

    stats_message = (
        "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É:*\n\n"
        f"üìÖ *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á:* {total_meetings}\n"
        f"üìã *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á:* {total_tasks}\n"
        f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:* {tasks_done} ({tasks_done_percent}%)\n\n"
    )

    grades = statistics.get("grades", {})
    if grades:
        stats_message += format_grades(grades)
    else:
        stats_message += "–û—Ü–µ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
    return stats_message


def format_project_details(project_details):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    students = project_details["students"]
    print(students)
    student_str = ""
    for student in students:
        student_str = student_str + f"{student['surname']} {student['name']} {student['middlename']}, {student['cource']} –∫—É—Ä—Å \n"
    theme = project_details["theme"]
    details_message = (
            "*–¢–µ–º–∞:* "
            + theme
            + "\n"
            + "*–ì–æ–¥:* "
            + str(project_details["year"])
            + "\n"
            + "*–°—Ç—É–¥–µ–Ω—Ç—ã:* "
            + student_str
            + "\n"
            + "*–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:* "
            + project_details["status"]
            + "\n"
            + "*–°—Ç–∞–¥–∏—è —Ä–∞–±–æ—Ç—ã:* "
            + project_details["stage"]
            + "\n"
            + "*–°—Å—ã–ª–∫–∞ –Ω–∞ Google Drive:* [–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–∞–ø–∫–µ]("
            + project_details["cloud_folder_link"]
            + ")\n"
    )
    return details_message


def create_project_card(project):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
    return f"""–¢–µ–º–∞: {project['theme']}\n–ì–æ–¥: {project['year']}"""


def create_markup(bot, project_details, chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º."""
    markup = telebot.types.InlineKeyboardMarkup()
    button1 = telebot.types.InlineKeyboardButton(
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"statistics_project_{project_details['id']}"
    )
    button2 = telebot.types.InlineKeyboardButton(
        "–ö–æ–º–º–∏—Ç—ã", callback_data=f"commits_project_{project_details['id']}"
    )
    button3 = telebot.types.InlineKeyboardButton(
        "–ó–∞–¥–∞–Ω–∏—è", callback_data=f"tasks_project_{project_details['id']}"
    )
  #  button4 = telebot.types.InlineKeyboardButton(
   #     "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
     #   callback_data=f"add_task_project_{project_details['id']}",
    #)

    if get_repohub(chat_id) is not None:
        markup.add(button1, button2, button3)
    else:
        # –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        bot.send_message(
            chat_id,
            f"""–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
—Å Github –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: <a href='{CLIENT_URL}/profile/integrations'>
–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º</a>""",
            parse_mode="HTML",
        )
        markup.add(button1, button3, button4)

    return markup


def handle_student_selection(message, bot):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_name = message.text
    if student_name == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞...":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
        bot.register_next_step_handler(message, handle_student_name)
        return
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    students = get_students()

    selected_student = next(
        (s for s in students
         if (s["surname"] + " " + s["name"] + " " + s["middlename"]) == student_name), None
    )

    if selected_student is None:
        bot.send_message(
            message.chat.id,
            "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        show_main_menu(message.chat.id)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(
        message, lambda msg: handle_project_theme(msg, bot, selected_student)
    )


def handle_project_theme(message, bot, student):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    project_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ (—á–∏—Å–ª–æ):")
    bot.register_next_step_handler(
        message, lambda msg: handle_project_year(msg, bot, student, project_theme)
    )


def handle_project_year(message, bot, student, project_theme):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        project_year = int(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ª–æ–≥–∏–Ω):")
        bot.register_next_step_handler(
            message,
            lambda msg: handle_repo_owner(msg, bot, student, project_theme, project_year),
        )
    except ValueError:
        bot.send_message(
            message.chat.id, "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        handle_project_year(message, bot, student, project_theme)


def handle_repo_owner(message, bot, student, project_theme, project_year):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    repo_owner = message.text
    project_info = {
        "repo_owner": repo_owner,
        "student": student,
        "project_theme": project_theme,
        "project_year": project_year
    }
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:")
    bot.register_next_step_handler(
        message,
        lambda msg: handle_repository_name(
            msg, bot, project_info
        ),
    )


def handle_repository_name(message, bot, project_info):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    repository_name = message.text

    response_message = add_project( message.chat.id,
        project_info["project_theme"], project_info["student"]["id"],
        project_info["project_year"], project_info["repo_owner"], repository_name
    )

    bot.send_message(message.chat.id, response_message)

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    show_main_menu(message.chat.id)


def handle_projects(message, bot):
    """–•–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        projects = get_projects(message.chat.id)

        if projects:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
            for project in projects:
                project_card = create_project_card(project)

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                markup = telebot.types.InlineKeyboardMarkup()
                button = telebot.types.InlineKeyboardButton(
                    "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"project_{project['id']}"
                )
                markup.add(button)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
                bot.send_message(message.chat.id, project_card, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    except RequestException as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
